/**
 * TEST CON DATOS REALES - FASE 3
 * Prueba completa del sistema con datos reales controlados
 */

/**
 * Test completo con datos reales - Flujo end-to-end
 */
function testFase3_DatosReales() {
  console.log('üöÄ INICIANDO TEST FASE 3 - DATOS REALES');
  console.log('======================================');
  
  // Datos reales pero marcados como TEST para f√°cil identificaci√≥n
  const datosReales = {
    nombreCapturador: 'TEST FASE3 - USUARIO REAL',
    congregacion: 'Canc√∫n', // Usar congregaci√≥n real
    liderCasaDeFeId: 'LCF-1018', // Usar l√≠der real del sistema
    fuenteContacto: 'Servicio Congregacional',
    almaNombres: 'MARIA ELENA',
    almaApellidos: 'RODRIGUEZ LOPEZ',
    almaTelefono: '9998887766',
    almaDireccion: 'Calle 25 #123 x 10 y 12, Centro, Canc√∫n',
    almaSexo: 'Femenino',
    almaEdad: 'Adulto (25-34)',
    aceptoJesus: 'S√≠',
    deseaVisita: 'S√≠',
    peticionOracion: ['Salvaci√≥n / Libertad Espiritual', 'Familia / Matrimonio'],
    responsableSeguimiento: 'S√≠'
  };
  
  try {
    console.log('üìã Datos de prueba preparados:');
    console.log(`- Nombre: ${datosReales.almaNombres} ${datosReales.almaApellidos}`);
    console.log(`- Congregaci√≥n: ${datosReales.congregacion}`);
    console.log(`- L√≠der: ${datosReales.liderCasaDeFeId}`);
    console.log(`- Tel√©fono: ${datosReales.almaTelefono}`);
    
    console.log('\n‚ö° EJECUTANDO processForm_v3 con datos reales...');
    const startTime = Date.now();
    
    const resultado = processForm_v3(datosReales);
    
    const duration = Date.now() - startTime;
    console.log(`\n‚è±Ô∏è TIEMPO TOTAL: ${duration}ms`);
    
    // Analizar resultado
    console.log('\nüìä RESULTADO DEL PROCESAMIENTO:');
    console.log(`Status: ${resultado.status}`);
    console.log(`ID generado: ${resultado.id || 'NO GENERADO'}`);
    console.log(`Fila guardada: ${resultado.rowNum || 'NO GUARDADO'}`);
    console.log(`Mensaje: ${resultado.message || 'NO HAY MENSAJE'}`);
    
    if (resultado.warning) {
      console.log(`‚ö†Ô∏è Advertencia: ${resultado.warning}`);
    }
    
    if (resultado.status === 'success') {
      console.log('\n‚úÖ GUARDADO EXITOSO - Verificando detalles...');
      
      // Verificar que el registro se guard√≥ correctamente
      const verificacion = verificarRegistroGuardado(resultado.id, resultado.rowNum);
      
      // Verificar estado de la cola de trabajos
      console.log('\nüìã Verificando cola de trabajos...');
      const colaStats = getQueueStatus();
      console.log(`Trabajos en cola: ${colaStats.total || 0}`);
      
      if (colaStats.total > 0) {
        console.log('üîÑ Hay trabajos en cola - esperando procesamiento...');
        
        // Esperar un momento y luego verificar si hay trabajos pendientes
        console.log('‚è≥ Esperando 5 segundos para procesamiento autom√°tico...');
        Utilities.sleep(5000);
        
        // Verificar si el dispatcher proces√≥ el trabajo
        const colaFinal = getQueueStatus();
        console.log(`Trabajos restantes: ${colaFinal.total || 0}`);
        
        if (colaFinal.total > 0) {
          console.log('üîß Forzando procesamiento manual...');
          const procesamientoManual = processQueueManually();
          console.log('Resultado procesamiento manual:', JSON.stringify(procesamientoManual, null, 2));
        }
      }
      
      // Verificaci√≥n final del registro
      console.log('\nüîç VERIFICACI√ìN FINAL DEL REGISTRO...');
      console.log('‚è≥ Esperando 2 segundos para verificaci√≥n final...');
      Utilities.sleep(2000);
      verificacionFinalRegistro(resultado.id);
      
      return {
        success: true,
        duration: duration,
        id: resultado.id,
        rowNum: resultado.rowNum,
        message: 'Test completado exitosamente'
      };
      
    } else {
      console.log('\n‚ùå ERROR EN EL PROCESAMIENTO:');
      console.log(`Error: ${resultado.error || resultado.message}`);
      
      return {
        success: false,
        error: resultado.error || resultado.message,
        duration: duration
      };
    }
    
  } catch (error) {
    console.error('\n‚ùå ERROR EN TEST FASE 3:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * Verifica que el registro se guard√≥ correctamente en la hoja
 */
function verificarRegistroGuardado(id, rowNum) {
  console.log(`üîç Verificando registro ID: ${id} en fila: ${rowNum}`);
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID)
      .getSheetByName(CONFIG.SHEETS.INGRESOS);
    
    if (!sheet) {
      console.log('‚ùå No se pudo acceder a la hoja');
      return false;
    }
    
    if (rowNum > sheet.getLastRow()) {
      console.log('‚ùå N√∫mero de fila inv√°lido');
      return false;
    }
    
    // Leer toda la fila
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const rowData = sheet.getRange(rowNum, 1, 1, headers.length).getValues()[0];
    
    // Crear objeto con los datos
    const registro = {};
    headers.forEach((header, index) => {
      registro[header] = rowData[index];
    });
    
    // Verificaciones espec√≠ficas
    const checks = [
      { field: 'ID_Alma', expected: id, actual: registro['ID_Alma'] },
      { field: 'Nombres del Alma', expected: 'MARIA ELENA', actual: registro['Nombres del Alma'] },
      { field: 'Apellidos del Alma', expected: 'RODRIGUEZ LOPEZ', actual: registro['Apellidos del Alma'] },
      { field: 'KEY_BUSQUEDA', expected: 'maria elena|rodriguez lopez', actual: registro['KEY_BUSQUEDA'] }
    ];
    
    let verificacionExitosa = true;
    console.log('\nüìã Verificando campos clave:');
    
    checks.forEach(check => {
      const coincide = check.actual === check.expected;
      if (coincide) {
        console.log(`‚úÖ ${check.field}: ${check.actual}`);
      } else {
        console.log(`‚ùå ${check.field}: Esperado "${check.expected}", Actual "${check.actual}"`);
        verificacionExitosa = false;
      }
    });
    
    // Mostrar algunos campos adicionales
    console.log('\nüìä Otros campos relevantes:');
    console.log(`- Timestamp: ${registro['Timestamp']}`);
    console.log(`- Congregaci√≥n: ${registro['Congregaci√≥n']}`);
    console.log(`- ID LCF: ${registro['ID LCF']}`);
    console.log(`- Estado: ${registro['Estado']}`);
    console.log(`- Estado_Revision: ${registro['Estado_Revision']}`);
    
    return verificacionExitosa;
    
  } catch (error) {
    console.error('‚ùå Error verificando registro:', error);
    return false;
  }
}

/**
 * Verificaci√≥n final despu√©s de procesamiento completo
 */
function verificacionFinalRegistro(id) {
  console.log(`\nüîç VERIFICACI√ìN FINAL - ID: ${id}`);
  console.log('=====================================');
  
  try {
    // Usar la funci√≥n existente de verificaci√≥n por alma
    verificarAlma('MARIA ELENA', 'RODRIGUEZ LOPEZ');
    
    // Tambi√©n verificar estad√≠sticas finales
    console.log('\nüìä Estad√≠sticas finales de cola:');
    const stats = getQueueStatus();
    console.log(JSON.stringify(stats, null, 2));
    
    console.log('\n‚úÖ VERIFICACI√ìN FINAL COMPLETADA');
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n final:', error);
  }
}

/**
 * Comparaci√≥n directa: Original vs FastPath V3
 */
function comparacionDirecta_OriginalVsFastPath() {
  console.log('‚ö° COMPARACI√ìN DIRECTA: ORIGINAL vs FASTPATH V3');
  console.log('===============================================');
  
  const datosComparacion = {
    nombreCapturador: 'TEST COMPARACION',
    congregacion: 'Canc√∫n',
    liderCasaDeFeId: 'LCF-1018',
    fuenteContacto: 'Servicio Congregacional',
    almaNombres: 'JUAN CARLOS',
    almaApellidos: 'PRUEBA COMPARACION',
    almaTelefono: '9995554433',
    almaDireccion: 'Direcci√≥n de prueba comparaci√≥n',
    almaSexo: 'Masculino',
    almaEdad: 'Joven (15-24)',
    aceptoJesus: 'S√≠',
    deseaVisita: 'No',
    peticionOracion: ['Finanzas / Trabajo'],
    responsableSeguimiento: 'No'
  };
  
  console.log('‚ö†Ô∏è IMPORTANTE: Esta funci√≥n crear√° 2 registros reales');
  console.log('¬øDeseas continuar? Ejecuta manualmente si est√°s seguro.');
  console.log('\nPara ejecutar la comparaci√≥n, descomenta las l√≠neas de guardado.');
  
  /*
  // DESCOMENTA ESTAS L√çNEAS PARA EJECUTAR LA COMPARACI√ìN REAL
  console.log('\nüêå Ejecutando processForm ORIGINAL...');
  const start1 = Date.now();
  const result1 = processForm(datosComparacion);
  const time1 = Date.now() - start1;
  
  console.log('\n‚ö° Ejecutando processForm_v3 FASTPATH...');
  const start2 = Date.now();
  const result2 = processForm_v3(datosComparacion);
  const time2 = Date.now() - start2;
  
  console.log('\nüìä RESULTADOS COMPARACI√ìN:');
  console.log(`Original: ${time1}ms - Status: ${result1.status}`);
  console.log(`FastPath: ${time2}ms - Status: ${result2.status}`);
  console.log(`Mejora: ${Math.round(time1/time2)}x m√°s r√°pido`);
  */
}

/**
 * Test r√°pido sin guardado real - Solo verificaci√≥n de componentes
 */
function testRapido_SinGuardado() {
  console.log('‚ö° TEST R√ÅPIDO - SIN GUARDADO REAL');
  console.log('=================================');
  
  const datosTest = {
    nombreCapturador: 'TEST SIN GUARDADO',
    congregacion: 'Canc√∫n',
    liderCasaDeFeId: 'LCF-1018',
    fuenteContacto: 'Casa de Fe',
    almaNombres: 'PRUEBA',
    almaApellidos: 'SIN GUARDADO',
    almaTelefono: '9997776655',
    almaDireccion: 'Direcci√≥n de prueba',
    almaSexo: 'Femenino',
    almaEdad: 'Mayor 45',
    aceptoJesus: 'No estoy seguro',
    deseaVisita: 'S√≠',
    peticionOracion: ['Sanidad (F√≠sica o Emocional)'],
    responsableSeguimiento: 'S√≠'
  };
  
  try {
    // Solo testear componentes sin guardado
    console.log('üîÑ Testing normalizaci√≥n...');
    const normalized = FastPathCore.normalizePayload(datosTest);
    
    console.log('üîÑ Testing validaci√≥n...');
    const validation = FastPathCore.fastValidation(normalized);
    console.log(`Validaci√≥n: ${validation.isValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
    
    console.log('üîÑ Testing generaci√≥n de clave...');
    const searchKey = FastPathCore.makeSearchKey(normalized.almaNombres, normalized.almaApellidos);
    console.log(`Clave: ${searchKey}`);
    
    console.log('üîÑ Testing verificaci√≥n de duplicados...');
    const duplicateCheck = FastPathCore.quickExactCheck(searchKey);
    console.log(`Duplicado: ${duplicateCheck ? '‚ö†Ô∏è S√ç' : '‚úÖ NO'}`);
    
    console.log('üîÑ Testing preparaci√≥n de registro...');
    const record = prepareRecord_v3('TEST-123', normalized, { searchKey: searchKey });
    console.log(`Registro preparado: ${record.length} columnas`);
    
    console.log('\n‚úÖ TODOS LOS COMPONENTES FUNCIONAN CORRECTAMENTE');
    console.log('Sistema listo para guardado real.');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error en test r√°pido:', error);
    return false;
  }
}

/**
 * Funci√≥n principal para ejecutar test completo de Fase 3
 */
function ejecutarTestCompleto_Fase3() {
  console.log('üéØ EJECUTANDO TEST COMPLETO - FASE 3');
  console.log('====================================');
  
  // Paso 1: Test r√°pido sin guardado
  console.log('\n1Ô∏è‚É£ Test r√°pido de componentes...');
  const testRapido = testRapido_SinGuardado();
  
  if (!testRapido) {
    console.log('‚ùå Test r√°pido fall√≥ - abortando');
    return false;
  }
  
  console.log('\n‚è≥ Esperando 3 segundos...\n');
  Utilities.sleep(3000);
  
  // Paso 2: Test con datos reales
  console.log('2Ô∏è‚É£ Test con datos reales...');
  const testReal = testFase3_DatosReales();
  
  if (testReal.success) {
    console.log('\nüéâ TEST FASE 3 COMPLETADO EXITOSAMENTE');
    console.log(`‚ö° Velocidad achieved: ${testReal.duration}ms`);
    console.log(`üìù Registro creado: ${testReal.id}`);
    console.log('\n‚úÖ SISTEMA LISTO PARA PRODUCCI√ìN');
  } else {
    console.log('\n‚ùå TEST FASE 3 FALL√ì');
    console.log(`Error: ${testReal.error}`);
  }
  
  return testReal.success;
}
